#define STDOUT 0xd0580000
.section .text
.global _start
_start:
 la a0, Zfc      # Load input array address
 la a1, result   # Load output array address
 li a2, 10       # Number of elements in the array
 call softmax    # Call softmax function
# After softmax calculation, print the result array
 la a0, result   # Base address of result array
 li a1, 10       # Number of elements
 call printToLogVectorized
 j _finish
# ------------------------------------------
# Function: softmax 
# ------------------------------------------
softmax:
 addi sp, sp, -24
 sw ra, 20(sp)
 sw s0, 16(sp)
 sw s1, 12(sp)
 sw s2, 8(sp)
 sw s3, 4(sp)
 sw s4, 0(sp)
 
 mv s0, a0       # s0 = input array pointer
 mv s1, a1       # s1 = output array pointer
 mv s2, a2       # s2 = total number of elements
 
 #calculate e^x approximation for each element
 mv s3, s0       # Current input pointer
 mv s4, s1       # Current output pointer
 mv t0, s2       # Remaining elements to process
 
 #constants
 la t4, half
 flw fa0, 0(t4)  # fa0 = 0.5
 la t5, sixth
 flw fa1, 0(t5)  # fa1 = 1/6
 la t6, one
 flw fa2, 0(t6)  # fa2 = 1.0
 
 #sum accumulator
 fmv.w.x fa3, zero
 
exp_loop:
 vsetvli t1, t0, e32, ta, ma  # Set vector length for this iteration
 vle32.v v1, (s3)             # v1 = current chunk of input vector
 
 vfmul.vv v2, v1, v1          # v2 = x²
 
 vfmul.vv v3, v2, v1          # v3 = x³
 
 vfmv.v.f v4, fa0
 vfmul.vv v4, v4, v2          # v4 = x² * 0.5
 
 vfmv.v.f v5, fa1
 vfmul.vv v5, v5, v3          # v5 = x³ * 1/6
 
 vfadd.vv v6, v1, v4          # v6 = x + x²/2
 vfadd.vv v6, v6, v5          # v6 = x + x²/2 + x³/6
 vfmv.v.f v7, fa2
 vfadd.vv v7, v7, v6          # v7 = 1 + x + x²/2 + x³/6 ≈ e^x Taylor Series
 
 # Store e^x approximations temporarily to output array
 vse32.v v7, (s4)
 
 # Accumulate the sum of all e^x values
 vmv.v.i v8, 0
 vfredusum.vs v8, v7, v8      # Sum all elements in v7
 vfmv.f.s ft0, v8             # Extract scalar result
 fadd.s fa3, fa3, ft0         # Add to running total
 
 slli t2, t1, 2               # t2 = bytes processed (4 bytes per float)
 add s3, s3, t2               # Update input pointer
 add s4, s4, t2               # Update output pointer
 sub t0, t0, t1               # Decrease remaining elements
 bnez t0, exp_loop            # Continue if elements remain
 
 #Normalize by dividing each e^x by the sum
 mv s3, s1                    # Reset to beginning of output array
 mv s4, s1                    # We'll overwrite the same array
 mv t0, s2                    # Reset element counter
 
normalize_loop:
 vsetvli t1, t0, e32, ta, ma  # Set vector length for this iteration
 vle32.v v1, (s3)             # Load e^x values
 
 vfmv.v.f v2, fa3             # Broadcast sum to v2
 vfdiv.vv v3, v1, v2          # v3 = e^x / sum
 
 vse32.v v3, (s4)
 
 slli t2, t1, 2               # t2 = bytes processed
 add s3, s3, t2               # Update input pointer
 add s4, s4, t2               # Update output pointer
 sub t0, t0, t1               # Decrease remaining elements
 bnez t0, normalize_loop      # Continue if elements remain
 
 # Restore saved registers and return
 lw ra, 20(sp)
 lw s0, 16(sp)
 lw s1, 12(sp)
 lw s2, 8(sp)
 lw s3, 4(sp)
 lw s4, 0(sp)
 addi sp, sp, 24
 ret # return

printToLogVectorized:        
    addi sp, sp, -4
    sw a0, 0(sp)

    li t0, 0x123
    li t0, 0x456
    mv a1, a1
    li t0, 0

printloop:
    vsetvli t3, a1, e32       
    slli t4, t3, 2              

    vle32.v v1, (a0)
    add a0, a0, t4
    add t0, t0, t3

    bge t0, a1, endPrintLoop
    j printloop

endPrintLoop:
    li t0, 0x123
    li t0, 0x456

    lw a0, 0(sp)
    addi sp, sp, 4
    jr ra

_finish:
    li x3, 0xd0580000
    li x5, 0xff
    sb x5, 0(x3)
    beq x0, x0, _finish

    .rept 100
        nop
    .endr

.section .data

Zfc:
    .float 1.0, 0.9, 0.5, 0.8, 0.3, 0.75, 1.0, 0.0, 0.0, 0.0  # 10 input elements

result:
    .space 40   

one:
    .float 1.0

half:
    .float 0.5

sixth: 
    .float 0.16666667