#define STDOUT 0xd0580000

.section .text
.global _start

_start:
    # Initialize test data
    la t0, conv_output
    li t1, 0x3F99999A    # 1.2 in IEEE754
    sw t1, 0(t0)
    li t1, 0x4059999A    # 3.4
    sw t1, 4(t0)
    li t1, 0x3F000000    # 0.5
    sw t1, 8(t0)
    li t1, 0x40066666    # 2.1
    sw t1, 12(t0)
    li t1, 0x3F4CCCCD    # 0.8
    sw t1, 96(t0)        # 24*4 = 96 (next row)
    li t1, 0x3FF33333    # 1.9
    sw t1, 100(t0)
    li t1, 0x4019999A    # 2.4
    sw t1, 104(t0)
    li t1, 0x3E99999A    # 0.3
    sw t1, 108(t0)

    # Load parameters
    la a0, conv_output       # Input tensor (24x24x8)
    la a1, output_max        # Output buffer (12x12x8)
    li a2, 24                # input width
    li a3, 12                # output width
    li a4, 8                 # depth

    call maxpool_2x2

    # Print results
    la a0, output_max
    li a1, 4
    call printToLogVectorized

    j _finish

# ======================================
# Corrected MaxPool Implementation
# ======================================
maxpool_2x2:
    addi sp, sp, -16
    li t1, 0                  # depth/channel counter

channel_loop:
    li t2, 0                  # out_y counter

row_loop:
    li t3, 0                  # out_x counter

col_loop:
    # Calculate input address
    mul t4, t2, a2            # out_y * input_width
    slli t5, t3, 1            # out_x * 2
    add t4, t4, t5            # input index
    mul t5, a2, a2            # input_plane_size
    mul t6, t1, t5            # channel offset
    add t4, t4, t6            # full index
    slli t4, t4, 2            # byte offset
    add t5, a0, t4            # base address

    # Load 2x2 block
    flw ft0, 0(t5)            # [0,0]
    flw ft1, 4(t5)            # [0,1]
    slli t6, a2, 2            # row stride in bytes
    add t6, t5, t6            # next row address
    flw ft2, 0(t6)            # [1,0]
    flw ft3, 4(t6)            # [1,1]

    # Store to stack for vector load
    fsw ft0, 0(sp)
    fsw ft1, 4(sp)
    fsw ft2, 8(sp)
    fsw ft3, 12(sp)

    # Vector max reduction
    vsetivli t0, 4, e32, m1   # Process 4 elements
    vle32.v v0, (sp)
    vfredmax.vs v1, v0, v0
    vfmv.f.s ft0, v1

    # Calculate output address
    mul t4, t2, a3            # out_y * output_width
    add t4, t4, t3            # + out_x
    mul t5, a3, a3            # output_plane_size
    mul t6, t1, t5            # channel offset
    add t4, t4, t6            # full index
    slli t4, t4, 2            # byte offset
    add t5, a1, t4            # output address

    # Store result
    fsw ft0, 0(t5)

    # Loop control
    addi t3, t3, 1
    blt t3, a3, col_loop
    addi t2, t2, 1
    blt t2, a3, row_loop
    addi t1, t1, 1
    blt t1, a4, channel_loop

    addi sp, sp, 16
    ret

# ======================================
# Print Function (Unchanged)
# ======================================
printToLogVectorized:
    addi sp, sp, -4
    sw a0, 0(sp)

    li t0, 0x123
    li t0, 0x456
    mv a1, a1
    li t0, 0

printloop:
    vsetvli t3, a1, e32
    slli t4, t3, 2

    vle32.v v1, (a0)
    add a0, a0, t4
    add t0, t0, t3

    bge t0, a1, endPrintLoop
    j printloop

endPrintLoop:
    li t0, 0x123
    li t0, 0x456

    lw a0, 0(sp)
    addi sp, sp, 4
    jr ra

# ======================================
# Termination
# ======================================
_finish:
    li x3, 0xd0580000
    addi x5, x0, 0xff
    sb x5, 0(x3)
    beq x0, x0, _finish

    .rept 100
        nop
    .endr

.section .data
output_max:  .space 4608
conv_output:
    .float 1.2, 3.4, 0.5, 2.1  # First 2x2 block
    .float 0.8, 1.9, 2.4, 0.3  # Second 2x2 block
    .space 18432-32             # Remainder
    
    